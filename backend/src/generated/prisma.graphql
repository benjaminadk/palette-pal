type AggregatePalette {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPalette(data: PaletteCreateInput!): Palette!
  updatePalette(data: PaletteUpdateInput!, where: PaletteWhereUniqueInput!): Palette
  updateManyPalettes(data: PaletteUpdateManyMutationInput!, where: PaletteWhereInput): BatchPayload!
  upsertPalette(where: PaletteWhereUniqueInput!, create: PaletteCreateInput!, update: PaletteUpdateInput!): Palette!
  deletePalette(where: PaletteWhereUniqueInput!): Palette
  deleteManyPalettes(where: PaletteWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Palette {
  id: ID!
  createdAt: DateTime!
  title: String!
  colors: [String!]!
  names: [String!]!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  likes: Int
  owner: User
}

type PaletteConnection {
  pageInfo: PageInfo!
  edges: [PaletteEdge]!
  aggregate: AggregatePalette!
}

input PaletteCreatecolorsInput {
  set: [String!]
}

input PaletteCreateInput {
  id: ID
  title: String!
  colors: PaletteCreatecolorsInput
  names: PaletteCreatenamesInput
  tags: TagCreateManyWithoutPaletteInput
  likes: Int
  owner: UserCreateOneInput
}

input PaletteCreatenamesInput {
  set: [String!]
}

input PaletteCreateOneWithoutTagsInput {
  create: PaletteCreateWithoutTagsInput
  connect: PaletteWhereUniqueInput
}

input PaletteCreateWithoutTagsInput {
  id: ID
  title: String!
  colors: PaletteCreatecolorsInput
  names: PaletteCreatenamesInput
  likes: Int
  owner: UserCreateOneInput
}

type PaletteEdge {
  node: Palette!
  cursor: String!
}

enum PaletteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  likes_ASC
  likes_DESC
}

type PalettePreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  colors: [String!]!
  names: [String!]!
  likes: Int
}

type PaletteSubscriptionPayload {
  mutation: MutationType!
  node: Palette
  updatedFields: [String!]
  previousValues: PalettePreviousValues
}

input PaletteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PaletteWhereInput
  AND: [PaletteSubscriptionWhereInput!]
  OR: [PaletteSubscriptionWhereInput!]
  NOT: [PaletteSubscriptionWhereInput!]
}

input PaletteUpdatecolorsInput {
  set: [String!]
}

input PaletteUpdateInput {
  title: String
  colors: PaletteUpdatecolorsInput
  names: PaletteUpdatenamesInput
  tags: TagUpdateManyWithoutPaletteInput
  likes: Int
  owner: UserUpdateOneInput
}

input PaletteUpdateManyMutationInput {
  title: String
  colors: PaletteUpdatecolorsInput
  names: PaletteUpdatenamesInput
  likes: Int
}

input PaletteUpdatenamesInput {
  set: [String!]
}

input PaletteUpdateOneWithoutTagsInput {
  create: PaletteCreateWithoutTagsInput
  update: PaletteUpdateWithoutTagsDataInput
  upsert: PaletteUpsertWithoutTagsInput
  delete: Boolean
  disconnect: Boolean
  connect: PaletteWhereUniqueInput
}

input PaletteUpdateWithoutTagsDataInput {
  title: String
  colors: PaletteUpdatecolorsInput
  names: PaletteUpdatenamesInput
  likes: Int
  owner: UserUpdateOneInput
}

input PaletteUpsertWithoutTagsInput {
  update: PaletteUpdateWithoutTagsDataInput!
  create: PaletteCreateWithoutTagsInput!
}

input PaletteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  owner: UserWhereInput
  AND: [PaletteWhereInput!]
  OR: [PaletteWhereInput!]
  NOT: [PaletteWhereInput!]
}

input PaletteWhereUniqueInput {
  id: ID
}

type Query {
  palette(where: PaletteWhereUniqueInput!): Palette
  palettes(where: PaletteWhereInput, orderBy: PaletteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Palette]!
  palettesConnection(where: PaletteWhereInput, orderBy: PaletteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaletteConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
  USER
}

type Subscription {
  palette(where: PaletteSubscriptionWhereInput): PaletteSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tag {
  id: ID!
  text: String!
  palette: Palette
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  text: String!
  palette: PaletteCreateOneWithoutTagsInput
}

input TagCreateManyWithoutPaletteInput {
  create: [TagCreateWithoutPaletteInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutPaletteInput {
  id: ID
  text: String!
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
}

type TagPreviousValues {
  id: ID!
  text: String!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateInput {
  text: String
  palette: PaletteUpdateOneWithoutTagsInput
}

input TagUpdateManyDataInput {
  text: String
}

input TagUpdateManyMutationInput {
  text: String
}

input TagUpdateManyWithoutPaletteInput {
  create: [TagCreateWithoutPaletteInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPaletteInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPaletteInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithoutPaletteDataInput {
  text: String
}

input TagUpdateWithWhereUniqueWithoutPaletteInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutPaletteDataInput!
}

input TagUpsertWithWhereUniqueWithoutPaletteInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutPaletteDataInput!
  create: TagCreateWithoutPaletteInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  palette: PaletteWhereInput
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  twitterId: ID
  createdAt: DateTime!
  name: String!
  email: String!
  password: String!
  image: String!
  confirmed: Boolean!
  forgotPasswordLock: Boolean!
  role: Role!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  twitterId: ID
  name: String!
  email: String!
  password: String!
  image: String!
  confirmed: Boolean
  forgotPasswordLock: Boolean
  role: Role
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  twitterId_ASC
  twitterId_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  image_ASC
  image_DESC
  confirmed_ASC
  confirmed_DESC
  forgotPasswordLock_ASC
  forgotPasswordLock_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  twitterId: ID
  createdAt: DateTime!
  name: String!
  email: String!
  password: String!
  image: String!
  confirmed: Boolean!
  forgotPasswordLock: Boolean!
  role: Role!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  twitterId: ID
  name: String
  email: String
  password: String
  image: String
  confirmed: Boolean
  forgotPasswordLock: Boolean
  role: Role
}

input UserUpdateInput {
  twitterId: ID
  name: String
  email: String
  password: String
  image: String
  confirmed: Boolean
  forgotPasswordLock: Boolean
  role: Role
}

input UserUpdateManyMutationInput {
  twitterId: ID
  name: String
  email: String
  password: String
  image: String
  confirmed: Boolean
  forgotPasswordLock: Boolean
  role: Role
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  twitterId: ID
  twitterId_not: ID
  twitterId_in: [ID!]
  twitterId_not_in: [ID!]
  twitterId_lt: ID
  twitterId_lte: ID
  twitterId_gt: ID
  twitterId_gte: ID
  twitterId_contains: ID
  twitterId_not_contains: ID
  twitterId_starts_with: ID
  twitterId_not_starts_with: ID
  twitterId_ends_with: ID
  twitterId_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  confirmed: Boolean
  confirmed_not: Boolean
  forgotPasswordLock: Boolean
  forgotPasswordLock_not: Boolean
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  twitterId: ID
  email: String
}
